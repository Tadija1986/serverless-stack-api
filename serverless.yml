# contains the configuration on what AWS services Serverless will provision and how to configure them
# NOTE: update this with your service name, 
# Serverless Framework creates your stack on AWS using this as the name
service: notes-app-api

# Create an optimized package for our functions
# Serverless Framework to create a single package per Lambda function 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline # helpful for local development
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  # These environment variables are made available to our functions
  # under process.env.
  # The name of DynamoDB table from the environment variable can be used as variable process.env.tableName
  environment:
    tableName: notes
    # The STRIPE_SECRET_KEY from the .env file down gets loaded as an environment variable when we test our code locally
    # This allows us to add a Lambda environment variable called stripeSecretKey
    # We do this using the stripeSecretKey: ${env:STRIPE_SECRET_KEY} line
    # And just like our tableName environment variable, we can reference it in our Lambda function using process.env.stripeSecretKey
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

  # 'iamRoleStatements' defines the permission policy (which resources have access to) for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Specifying DynamoDB using, roughly pointing to every DynamoDB table in the eu-central-1 region
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"

# Configure the API Endpoints
# This pattern of using a single Lambda function to respond to a single HTTP event is very much like the Microservices architecture
functions:
  create:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call, our frontend is going to be served from a different domain
  # - authorizer: authenticate using the AWS IAM role
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
  # Defines an HTTP API endpoint that calls the main function in get.js
  # - path: url path is /notes/{id}
  # - method: GET request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call, our frontend is going to be served from a different domain
  # - authorizer: authenticate using the AWS IAM role
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
  # Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is /notes
  # - method: GET request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call, our frontend is going to be served from a different domain
  # - authorizer: authenticate using the AWS IAM role
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
  # Defines an HTTP API endpoint that calls the main function in update.js
  # - path: url path is /notes/{id}
  # - method: PUT request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call, our frontend is going to be served from a different domain
  # - authorizer: authenticate using the AWS IAM role
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
  # Defines an HTTP API endpoint that calls the main function in delete.js
  # - path: url path is /notes/{id}
  # - method: DELETE request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call, our frontend is going to be served from a different domain
  # - authorizer: authenticate using the AWS IAM role
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
  # Defines an HTTP API endpoint that calls the main function in billing.js
  # - path: url path is /billing
  # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
